{"version":3,"sources":["Table.js","AddDetail.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Table","this","props","detail","deleteDetail","detailList","map","details","className","key","id","style","display","width","overflow","fontSize","name","src","alt","onClick","Component","AddDetail","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","document","getElementById","addDetail","onSubmit","type","placeholder","onChange","TodoList","count","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAuBeA,G,sLAnBD,IAAD,EAC4BC,KAAKC,MAA9BC,EADH,EACGA,OAAQC,EADX,EACWA,aACVC,EAAaF,EAAOG,KAAI,SAAAC,GAC1B,OACI,yBAAKC,UAAU,UAAUC,IAAKF,EAAQG,IACpC,yBAAKC,MAAO,CAACC,QAAS,eAAgBC,MAAO,QAASC,SAAU,SAAUC,SAAU,QAAUC,KAAK,QAAnG,IAA4GT,EAAQS,MACpH,yBAAKC,IAAI,8DAA8DC,IAAI,UAAUC,QAAS,WAAOf,EAAaG,EAAQG,WAKtI,OACE,yBAAKF,UAAU,eACTH,O,GAdMe,c,OCgCLC,E,2MA/BXC,MAAQ,CACJN,KAAM,M,EAEVO,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOhB,GAAKc,EAAEE,OAAOC,S,EAIhCC,aAAe,SAACJ,GACZA,EAAEK,iBACF,IAAIb,EAAOc,SAASC,eAAe,QACnB,KAAbf,EAAKW,OACJ,EAAKzB,MAAM8B,UAAU,EAAKV,OAE9BN,EAAKW,MAAO,I,wEAGZ,OACI,6BACI,0BAAMM,SAAUhC,KAAK2B,cACjB,6BAEA,2BAAOM,KAAK,OAAOC,YAAY,YAAYzB,GAAG,OAAO0B,SAAUnC,KAAKsB,eACpE,6C,GAzBIH,aCoCPiB,E,YAlCb,aAAc,IAAD,8BACX,+CAOFL,UAAY,SAAC7B,GACXA,EAAOO,GAAK,EAAK4B,QACf,EAAKb,SAAS,CACZtB,OAAM,sBAAO,EAAKmB,MAAMnB,QAAlB,CAA0BA,OAXzB,EAebC,aAAe,SAACM,GACd,IAAIP,EAAS,EAAKmB,MAAMnB,OAAOoC,QAAO,SAAApC,GACpC,OAAOA,EAAOO,KAAOA,KAEvB,EAAKe,SAAS,CACZtB,OAAQA,KAlBV,EAAKmB,MAAO,CACVnB,OAAS,IAEX,EAAKmC,MAAQ,EALF,E,sEAwBX,OACE,yBAAK9B,UAAU,YACb,uBAAGG,MAAO,CAACI,SAAU,SAArB,aACA,kBAAC,EAAD,CAAOX,aAAgBH,KAAKG,aAAcD,OAAQF,KAAKqB,MAAMnB,SAC7D,kBAAC,EAAD,CAAW6B,UAAW/B,KAAK+B,iB,GA7BdZ,aCURoB,E,iLARX,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,W,GALUY,aCSEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASC,eAAe,SD6H3C,kBAAmBiB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.090abdf0.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Table.css';\r\n\r\nclass Table extends Component {\r\n    render() {\r\n        const { detail, deleteDetail } = this.props;\r\n        const detailList = detail.map(details => {\r\n            return(\r\n                <div className=\"details\" key={details.id}>\r\n                  <div style={{display: \"inline-block\", width: \"200px\", overflow: \"hidden\", fontSize: \"27px\" }} name=\"name\"> {details.name}</div>\r\n                  <img src=\"https://img.icons8.com/flat_round/50/000000/delete-sign.png\" alt=\"Display\" onClick={() => {deleteDetail(details.id)}}></img>\r\n                </div>\r\n            )\r\n        })\r\n\r\n      return (\r\n        <div className=\"detail-List\">\r\n            { detailList }\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default Table","import React, {Component} from 'react'\r\nimport './Table.css';\r\n\r\nclass AddDetail extends Component{\r\n    state = {\r\n        name: null,\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        var name = document.getElementById(\"name\");\r\n        if(name.value!==\"\") {\r\n            this.props.addDetail(this.state);\r\n        }\r\n        name.value =\"\";\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <br></br>\r\n                    {/* <label htmlFor=\"name\">Text: </label> */}\r\n                    <input type=\"text\" placeholder=\"Type here\" id=\"name\" onChange={this.handleChange} />\r\n                    <button>Add</button>\r\n                </form>    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddDetail","import React, { Component } from 'react';\r\nimport Table from './Table';\r\nimport AddDetail from './AddDetail';\r\n\r\nclass TodoList extends Component {\r\n    constructor(){\r\n      super();\r\n      this.state= {\r\n        detail : []\r\n      };\r\n      this.count = 0;\r\n    }\r\n    \r\n    addDetail = (detail) => {\r\n      detail.id = this.count++;\r\n        this.setState({\r\n          detail : [...this.state.detail, detail]\r\n        })\r\n    }\r\n  \r\n    deleteDetail = (id) => {\r\n      let detail = this.state.detail.filter(detail => {\r\n        return detail.id !== id;\r\n      })\r\n      this.setState({\r\n        detail: detail\r\n      })\r\n    }\r\n    render() {\r\n      return (\r\n        <div className=\"TodoList\">\r\n          <p style={{fontSize: '40px'}}>ToDo-List</p>\r\n          <Table deleteDetail = {this.deleteDetail} detail={this.state.detail}/>\r\n          <AddDetail addDetail={this.addDetail} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default TodoList;\r\n  ","import React, { Component } from 'react';\nimport TodoList from './TodoList';\n\nclass App extends Component {\n \n  render() {\n    return (\n      <div className=\"App\">\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}